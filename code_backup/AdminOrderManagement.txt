import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  Platform,
} from 'react-native';
import { collection, onSnapshot } from 'firebase/firestore';
import { db } from '../../lib/firebaseConfig';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Ionicons } from '@expo/vector-icons';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

export default function AdminOrderManagement() {
  const [orders, setOrders] = useState<any[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<any[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [showDatePicker, setShowDatePicker] = useState(false);

  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'orders'), (snapshot) => {
      const fetchedOrders = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setOrders(fetchedOrders);
      setFilteredOrders(fetchedOrders);
    });

    return () => unsubscribe();
  }, []);

  useEffect(() => {
    let filtered = orders;

    if (searchQuery) {
      filtered = filtered.filter(
        (order) =>
          order.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          order.lastName.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (selectedDate) {
      const selectedDateString = selectedDate.toDateString();
      filtered = filtered.filter(
        (order) => new Date(order.timestamp.seconds * 1000).toDateString() === selectedDateString
      );
    }

    setFilteredOrders(filtered);
  }, [searchQuery, selectedDate, orders]);

  const exportCSV = async () => {
    const header = 'First Name,Last Name,Department,Coins Used,Timestamp\n';
    const rows = filteredOrders.map((order) => {
      const date = new Date(order.timestamp.seconds * 1000).toLocaleString();
      return `${order.firstName},${order.lastName},${order.department},${order.coinsUsed},${date}`;
    });
    const csv = header + rows.join('\n');

    const fileUri = FileSystem.cacheDirectory + 'orders.csv';
    await FileSystem.writeAsStringAsync(fileUri, csv, { encoding: FileSystem.EncodingType.UTF8 });
    await Sharing.shareAsync(fileUri, {
      mimeType: 'text/csv',
      dialogTitle: 'Export Orders',
      UTI: 'public.comma-separated-values-text',
    });
  };

  const renderItem = ({ item }: { item: any }) => (
    <View style={styles.card}>
      <View style={styles.cardTextContainer}>
        <Text style={styles.cardTitle}>
          {item.firstName} {item.lastName}
        </Text>
        <Text style={styles.cardText}>üè¢ Dept: {item.department}</Text>
        <Text style={styles.cardText}>ü™ô Coins Used: {item.coinsUsed}</Text>
        <Text style={styles.cardText}>
          ‚è∞ Order Time: {new Date(item.timestamp.seconds * 1000).toLocaleString()}
        </Text>
      </View>
    </View>
  );

  const exportCSVWeb = (orders: any[]) => {
    const header = ['First Name', 'Last Name', 'Department', 'Coins Used', 'Order Time'];
    const rows = orders.map(o => [
      o.firstName,
      o.lastName,
      o.department,
      o.coinsUsed,
      new Date(o.timestamp.seconds * 1000).toLocaleString()
    ]);
  
    const csv = [header, ...rows].map(row => row.join(',')).join('\n');
  
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
  
    const a = document.createElement('a');
    a.href = url;
    a.download = 'orders.csv';
    a.click();
  
    URL.revokeObjectURL(url);
  };
  
  const exportCSVNative = async (orders: any[]) => {
    const header = ['First Name', 'Last Name', 'Department', 'Coins Used', 'Order Date & Time'];
    const rows = orders.map(o => [
      o.firstName,
      o.lastName,
      o.department,
      o.coinsUsed,
      new Date(o.timestamp.seconds * 1000).toLocaleString()
    ]);
  
    const csv = [header, ...rows].map(row => row.join(',')).join('\n');
  
    const fileUri = FileSystem.documentDirectory + 'orders.csv';
    await FileSystem.writeAsStringAsync(fileUri, csv, { encoding: FileSystem.EncodingType.UTF8 });
    await Sharing.shareAsync(fileUri);
  };
  

  return (
    <View style={styles.container}>
      {/* Top Bar */}
      <View style={styles.topBar}>
  <View style={{ flexDirection: 'row', alignItems: 'center' }}>
    {Platform.OS === 'web' ? (
      <>
        <input
          type="date"
          onChange={(e) => {
            const date = new Date(e.target.value);
            if (!isNaN(date.getTime())) setSelectedDate(date);
          }}
          value={selectedDate ? selectedDate.toISOString().split('T')[0] : ''}
          style={styles.webDatePicker}
        />
        <TouchableOpacity
          style={{ marginLeft: 10 }}
          onPress={() => exportCSVWeb(filteredOrders)}
        >
          <Text style={{ color: '#2b4eff' }}>‚¨áÔ∏è Export CSV</Text>
        </TouchableOpacity>
      </>
    ) : (
      <>
        <TouchableOpacity onPress={() => setShowDatePicker(true)}>
          <Ionicons name="calendar-outline" size={24} color="#2b4eff" />
        </TouchableOpacity>
        <TouchableOpacity
          style={{ marginLeft: 10 }}
          onPress={() => exportCSVNative(filteredOrders)}
        >
          <Text style={{ color: '#2b4eff' }}>‚¨áÔ∏è Export CSV</Text>
        </TouchableOpacity>
      </>
    )}
  </View>
</View>


      {/* üîç Name Search */}
      <View style={styles.filterRow}>
        <TextInput
          style={styles.searchInput}
          placeholder="üîç Search by name"
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>

      {selectedDate && (
        <TouchableOpacity onPress={() => setSelectedDate(null)} style={{ marginBottom: 10 }}>
          <Text style={{ color: 'gray', textAlign: 'right' }}>‚ùå Clear Date Filter</Text>
        </TouchableOpacity>
      )}

      {/* Native Date Picker */}
      {showDatePicker && Platform.OS !== 'web' && (
        <DateTimePicker
          value={selectedDate || new Date()}
          mode="date"
          display="default"
          onChange={(event, date) => {
            setShowDatePicker(false);
            if (date) setSelectedDate(date);
          }}
        />
      )}

      <FlatList
        data={filteredOrders}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        ListEmptyComponent={<Text style={{ textAlign: 'center', marginTop: 16 }}>No orders found.</Text>}
      />
    </View>    
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f8ff',
  },
  topBar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  heading: {
    fontSize: 26,
    fontWeight: 'bold',
    color: '#2b4eff',
  },
  webDatePicker: {
    padding: 8,
    fontSize: 14,
    borderRadius: 8,
    borderColor: '#ccc',
    borderWidth: 1,
  },
  exportButton: {
    backgroundColor: '#e0e7ff',
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 8,
  },
  exportText: {
    color: '#2b4eff',
    fontWeight: 'bold',
    fontSize: 13,
  },
  filterRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  searchInput: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 10,
    borderRadius: 10,
    borderColor: '#ccc',
    borderWidth: 1,
  },
  card: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  cardTextContainer: {
    flex: 1,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2b4eff',
    marginBottom: 4,
  },
  cardText: {
    fontSize: 14,
    color: '#555',
  },
});
